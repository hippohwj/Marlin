syntax = "proto3";
package sundial_rpc;

service SundialRPC {
    rpc contactRemote(SundialRequest) returns (SundialResponse) {}
}

message SundialRequest {
    enum RequestType {
        DummyReply = 0;
        READ_REQ = 1;
        PREPARE_REQ = 2;
        COMMIT_REQ = 3;
        ABORT_REQ = 4;
        SYS_REQ = 5;
        MEM_SYNC_REQ = 6;
        CACHE_PREHEAT_REQ = 7;
        TERMINATE_REQ = 8;
        MIGR_END_REQ = 9;
        DYNAMAST_MIGR_ST_REQ=10;
        DYNAMAST_MIGR_END_REQ=11;
    }

    message CachePreheatRequest {
        uint32 granule_id = 1;
    }
    
    message InvolvedGran {
        uint64 granule_id = 1;
    }

    message MemSyncRequest {
        uint64 key = 1;
        uint64 value= 2;
    }

    message ReadRequest {
        uint64 key = 1;
        uint64 index_id = 2;
        uint64 access_type = 3;
        uint32 lock_type = 4;
    }
    message TupleData {
        uint64 key = 1;
        uint64 table_id = 2;
        uint64 size = 3;
        bytes data = 4;
        uint64 access_type = 5;
        uint64 version = 6;
        uint64 index_id = 7;
    }
    message NodeData {
        uint64 nid = 1;
    }

    enum NodeType {
        COORDINATOR = 0;
        PARTICIPANT = 1;
        STORAGE = 2;
    }

    enum ResponseType {
        RESP_OK = 0;
        RESP_ABORT = 1;
        RESP_FAIL = 2;
        PREPARED_OK = 3;
        PREPARED_OK_RO = 4;
        PREPARED_ABORT = 5;
        ACK = 6;
        SYS_RESP = 7;
        NUM_RESP_TYPES = 8;
    }

    uint64                  txn_id        = 1;
    RequestType             request_type  = 2;
    repeated ReadRequest    read_requests = 3;
    repeated TupleData      tuple_data    = 4;
    uint64                  log_data_size = 5;
    uint64                  node_id       = 6;
    repeated NodeData       nodes         = 7;
    uint64                  request_time  = 8;
    uint64                  thread_id     = 9;
    NodeType                node_type     = 10;
    uint64                  coord_id      = 11;
    int32                   txn_state     = 12;
    uint64                  semaphore     = 13;
    uint32                  thd_id        = 14;
    ResponseType            forward_msg   = 15;
    uint64                  receiver_id   = 16;
    uint32                  tbl_id        = 17;
    repeated MemSyncRequest mem_sync_reqs = 18;
    repeated CachePreheatRequest cache_preheat_reqs = 19;
    repeated InvolvedGran   involved_grans = 20;

}

message SundialResponse {
    enum RequestType {
        DummyReply = 0;
        READ_REQ = 1;
        PREPARE_REQ = 2;
        COMMIT_REQ = 3;
        ABORT_REQ = 4;
        SYS_REQ = 5;
        MEM_SYNC_REQ = 6;
        CACHE_PREHEAT_REQ = 7;
        TERMINATE_REQ = 8;
        MIGR_END_REQ = 9;
        DYNAMAST_MIGR_ST_REQ=10;
        DYNAMAST_MIGR_END_REQ=11;
    }
    enum ResponseType {
        RESP_OK = 0;
        RESP_ABORT = 1;
        RESP_FAIL = 2;
        PREPARED_OK = 3;
        PREPARED_OK_RO = 4;
        PREPARED_ABORT = 5;
        ACK = 6;
        SYS_RESP = 7;
        NUM_RESP_TYPES = 8;
        SUSPEND = 9;
    }

    enum NodeType {
        COORDINATOR = 0;
        PARTICIPANT = 1;
        STORAGE = 2;
    }

    message TupleData {
        uint64 key = 1;
        uint64 table_id = 2;
        uint64 size = 3;
        bytes data = 4;
        uint64 access_type = 5;
        uint64 version = 6;
        uint64 index_id = 7;
    }

    message MemberData {
        uint64 granid = 1;
        uint64 node_id = 2;
    }

    message CachePreheatDelta {
        uint64 granid = 1;
        repeated uint64 keys = 2;
    }

    message AlbatrossPayload {
        bytes txns = 1;
        bytes locks = 2;
    }
    
    message AlbatrossDelta {
        uint64 granid = 1;
        repeated uint64 keys = 2;
        repeated bytes values = 3;
    }


    uint64                  txn_id        = 1;
    ResponseType            response_type = 2;
    repeated TupleData      tuple_data    = 3;
    uint64                  node_id       = 4;
    RequestType             request_type  = 5;
    uint32                  thd_id        = 6;
    NodeType                node_type     = 7;
    repeated MemberData     memb_data     = 8;
    repeated CachePreheatDelta cache_preheat_delta = 9;
    repeated AlbatrossPayload albatross_payload = 10;
    repeated AlbatrossDelta alb_dalta = 11;
}



